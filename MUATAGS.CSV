remark,"CSV-Import-Export"
remark,"Date = Sat Nov  5 22:57:04 2022"
remark,"Version = RSLogix 5000 v32.04"
remark,"Owner = AGUser"
remark,"Company = Automation Group"
0.3
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,,Point_IO:1:C,"","AB:1734_IE4:C:0","","(ExternalAccess := Read/Write)"
TAG,,Point_IO:1:I,"","AB:1734_IE4:I:0","","(ExternalAccess := Read/Write)"
TAG,,Point_IO:2:C,"","AB:1734_OE2:C:0","","(ExternalAccess := Read/Write)"
TAG,,Point_IO:2:I,"","AB:1734_OE2:I:0","","(ExternalAccess := Read/Write)"
TAG,,Point_IO:2:O,"","AB:1734_OE2:O:0","","(ExternalAccess := Read/Write)"
TAG,,Point_IO:3:C,"","AB:1734_DI8:C:0","","(ExternalAccess := Read/Write)"
ALIAS,,Point_IO:3:I,"","","Point_IO:I.Data[3]","(RADIX := Binary, ExternalAccess := Read/Write)"
TAG,,Point_IO:4:C,"","AB:1734_DO8_NoDiag:C:0","","(ExternalAccess := Read/Write)"
ALIAS,,Point_IO:4:I,"","","Point_IO:I.Data[4]","(RADIX := Binary, ExternalAccess := Read/Write)"
ALIAS,,Point_IO:4:O,"","","Point_IO:O.Data[4]","(RADIX := Binary, ExternalAccess := Read/Write)"
TAG,,Point_IO:I,"","AB:1734_5SLOT:I:0","","(ExternalAccess := Read/Write)"
TAG,,Point_IO:O,"","AB:1734_5SLOT:O:0","","(ExternalAccess := Read/Write)"
TAG,,Dummy_List,"","P_DescList[1]","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,FCV_001,"Cooling Valve","AOI_CM_CVLV","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,F_001,"AHU Fan VFD","AG_CM_VFD","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,PT_001,"Differential Pressure Transducer","AOI_CM_AIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,S01_IE4_ModuleStatus,"","ModuleStatus_3_0","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,S02_OE2C_ModuleStatus,"","ModuleStatus_3_0","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,S03_IB8_ModuleStatus,"","ModuleStatus_3_0","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,S04_OB8_ModuleStatus,"","ModuleStatus_3_0","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,SupplyDuct,"","Zone","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,TC_001,"","PID_ENHANCED","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,TT_001,"Supply Duct Temperature Transducer","AOI_CM_AIn","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,VFD_001,"","PID_ENHANCED","","(Constant := false, ExternalAccess := Read/Write)"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"MUA_Control","R04_Supply_Air_Temperature","Set Modulating Valve Position to 0% if Fan is Not Running to Prevent Freeze$N","OTE(FCV_001.Inp_InterlockOK)","0"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"AG_CM_DIn:AOI","Logic","Update Target PV status$NIf Target PV configured to use, determine status of NOK and OK Target status bits$NIf Target PV NOT configured to use, status of both is FALSE","OTE(sts_TgtPVOK)","6"
RCOMMENT,"AG_CM_DIn:AOI","Logic","If Fault Reset Required, wait for Inp_FaultReset$N","OTU(Inp_FaultReset)","9"
RCOMMENT,"AG_CM_DIn:AOI","Logic","State (Mainly for HMI Visualization)$N0 = OK and Off$N1 = OK and On$N2 = NOK and Off$N3 = NOK and On$N5 = Faulted","MOV(wrk_State,Val_State)","10"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"AG_CM_VFD:AOI","Logic","---$NRevision Comments$N---$N3.0 - Changed reference for Ramp AOI$N3.1 - Added input (Alias) for VFD Amps (Inp_AmpFB)$N3.2 - Modified VFD Ready Fault logic to include buffer timer if VFD was stopped$N3.2 - Re-structured Stop Command Delay/Hold logic$N3.2 Added cfg_HasSealH2O xic for timer$N3.3 Removed ONS for neq wrk_lastfaultcode, neq and wrk perform necessary logic","NOP()","0"
RCOMMENT,"AG_CM_VFD:AOI","Logic","Hand Run Control$NFor locall or remotely mounted selector switch/button and potentiometer$NTreated as 2-wire OR 3-wire control (Maintained Inputs OR Momentary Inputs)$N","OTL(HandRun)","7"
RCOMMENT,"AG_CM_VFD:AOI","Logic","Auto/Manual Logic$N","OTL(ManRun)","8"
RCOMMENT,"AG_CM_VFD:AOI","Logic","Manual Start/Stop Logic$N","OTU(Inp_ManStop)","9"
RCOMMENT,"AG_CM_VFD:AOI","Logic","Reset Manual Run Command if VFD Faults$N","OTU(ManRun)","10"
RCOMMENT,"AG_CM_VFD:AOI","Logic","Program/Operator Indication of ownership$N","OTE(sts_Oper)","11"
RCOMMENT,"AG_CM_VFD:AOI","Logic","COMMAND SUMMARY$NThis rung controls the RunCmd output command.$N The output command is immediately dropped if an ESTOP for that equipment is present.$NWhen in Hand, Observe Hand Inputs","OTE(Out_RunCmd)","12"
RCOMMENT,"AG_CM_VFD:AOI","Logic","Hand Fault Control, Reset Hand Run Command$N","OTU(HandRun)","13"
RCOMMENT,"AG_CM_VFD:AOI","Logic","COMMAND SUMMARY$NThis rung controls the StopCmd output command.$NIf StopCmdHold is configured, the StopCmdIndef needs to NOT be configured otherwise the instuction is pointless. Hold the Stop Command true for x-time (Used if VFD indicates Not-Ready while Stop Command is being issued)$NIf Stop CmdIndef is configured and StopCmdDly is not, Out_StopCmd directlyfollows the Out_StartCmd$NIf StopCmdIndef is configured and StopCmdDly is, Out_StopCmd follows the Out_StartCmd after x-time$N","OTE(Out_StopCmd)","14"
RCOMMENT,"AG_CM_VFD:AOI","Logic","Limit Speed Setpoints$N","MOV(HandSpeed_Scaleblock.Out_Val,wrk_HandSpdSP)","18"
RCOMMENT,"AG_CM_VFD:AOI","Logic","Select the appropriate speed setpoint source$NHand Mode supersedes the Auto/Manual","MOV(wrk_HandSpdSP,wrk_SpeedSP)","21"
RCOMMENT,"AG_CM_VFD:AOI","Logic","---$NVFD Start Ramp$NWhen RunCmd becomes true, load the parameters into the ramp$NInstruction will sense the value of $Qwrk_SpeedSP$Q, if it is less than the ramp sp, the ramp will reset.$NInstruction will continue to ramp even though the wrk_SpeedSP (written to above in the Auto, Hand and Manual routines) increases past it$'s own Out_Val$NOnce the ramp is completed, it no longer writes to the wrk_SpeedSP, so the setpoints that could be greater than the ramp setpoint will no longer get overwritten$N-","Ramp(SpeedRamp,wrk_SpeedSP)","22"
RCOMMENT,"AG_CM_VFD:AOI","Logic","Clear Speed Command$N","CLR(wrk_SpeedSP)","23"
RCOMMENT,"AG_CM_VFD:AOI","Logic","Limit SpeedSP$N","MOV(cfg_MaxSpeed,wrk_SpeedSP)","24"
RCOMMENT,"AG_CM_VFD:AOI","Logic","Speed Setpoint$N$N","MOV(ScaleBlock_FreqCmd.Out_Val,Out_FreqCmd)","25"
RCOMMENT,"AG_CM_VFD:AOI","Logic","Update Speed Feedback if no feedback is configured","MOV(Val_SpeedSP,ScaleBlock_SpeedFB.Out_Val)","26"
RCOMMENT,"AG_CM_VFD:AOI","Logic","Update Manual speed setpoint for bumpless transfer to manual mode$N","MOV(Val_SpeedSP,Inp_ManSpeedSP)","27"
RCOMMENT,"AG_CM_VFD:AOI","Logic","Track setpoint changes","MOV(wrk_HandSpdSP,wrk_HandSpeedSPlast)","28"
RCOMMENT,"AG_CM_VFD:AOI","Logic","ENABLE FAULT TIMER$NThe fault timer is started when the RunCmd command to run is set but there is no actual feedback from the","TON(FStartTmr,?,?)","29"
RCOMMENT,"AG_CM_VFD:AOI","Logic","--Runtime--$N1-Hour Timer","MOV(wrk_Runtime1.ACC,wrk_RuntimemSeconds)","37"
RCOMMENT,"AG_CM_VFD:AOI","Logic","--Runtime--$NEvery minute (When Runtime1 is done) increment Hours$N","RES(wrk_Runtime1)","38"
RCOMMENT,"AG_CM_VFD:AOI","Logic","--Runtime--$NAdd decimal value to Hours","CPT(Runtime_Hours,(2.77778e-07*wrk_RuntimemSeconds)+wrk_RuntimeHours1)","39"
RCOMMENT,"AG_CM_VFD:AOI","Logic","Run State$N","MOV(99,Val_State)","42"
RCOMMENT,"AG_CM_VFD:AOI","Logic","FAULT$NRun Fault detected.  The $QFault$Q bit is latched and not reset until acknowledged.$NPriority on Enumeration is Comm Fault, Drive Fault, Driive Ready, then Start/Stop Faults$N","OTL(sts_Fault)","43"
RCOMMENT,"AG_CM_VFD:AOI","Logic","VFD Fault Code Description Extraction","MOV(Inp_Fault1Code,Val_Fault1Code)","44"
RCOMMENT,"AG_CM_VFD:AOI","Logic","If Fault Reset Required, wait for Inp_FaultReset$NIf VFD Transitions from Fault to not Faulted, clear Fault Module$NFault status will not Reset if there is an active Comm Fault$N","OTU(Inp_FaultReset)","45"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
remark,"Comments for Program (AG_Ramp:AOI) Routine (EnableInFalse) not exported: source not available"
remark,"Comments for Program (AG_Ramp:AOI) Routine (Logic) not exported: source not available"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"AG_Time:AOI","Logic","Convert Inp_Val as MILLISECONDS into Hours, Minutes, Seconds and milliseconds$N","MOV(Inp_Val,inpvalLast)","0"
RCOMMENT,"AG_Time:AOI","Logic","Convert Inp_Val as SECONDS into Hours, Minutes, Seconds and milliseconds$N","MOV(Inp_Val,inpvalLast)","1"
RCOMMENT,"AG_Time:AOI","Logic","Reset the Prescan bit$N(Bit is latched in the $QPrescan$Q routine)$N","OTU(prescan)","2"
RCOMMENT,"AG_Time:AOI","Prescan","On System First scan of the instruction (Transition from Program to Run), Initiate the $QPreScan$Q bit.$NThis will execute the calculations for the first scan; after that the instruction will only compute when a change is detected on the Inp_Val$N$N","OTL(prescan)","0"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"AOI_AHU:AOI","Logic","Calculate Average of Enabled Temperature Sensors$N","OTE(int_Temp)","0"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"AOI_CM_AIn:AOI","Logic","If High-High Alarm is not configured to exist, scan the logic once, then jump therafter.","NOP()","3"
RCOMMENT,"AOI_CM_AIn:AOI","Logic","If High Alarm is not configured to exist, scan the logic once, then jump therafter.","NOP()","7"
RCOMMENT,"AOI_CM_AIn:AOI","Logic","If Low Alarm is not configured to exist, scan the logic once, then jump therafter.","NOP()","11"
RCOMMENT,"AOI_CM_AIn:AOI","Logic","If Low-Low Alarm is not configured to exist, scan the logic once, then jump therafter.","NOP()","15"
RCOMMENT,"AOI_CM_AIn:AOI","Logic","--$NChannel Fault Logic$N--$N","NOP()","19"
RCOMMENT,"AOI_CM_AIn:AOI","Logic","If Channel Fault is not configured to exist, scan the logic once, then jump therafter.","NOP()","20"
RCOMMENT,"AOI_CM_AIn:AOI","Logic","If Fault Reset Required, wait for Inp_FaultReset$N","OTU(Inp_FaultReset)","24"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"AOI_CM_CVLV:AOI","Logic","AUTO/MANUAL SELECTION FROM HMI$NThe $QAutoSel$Q and $QManSel$Q bits are set via the HMI and latch/unlatch the $QInAuto$Q bit accordingly.","OTU(Inp_ManSel)","3"
RCOMMENT,"AOI_CM_CVLV:AOI","Logic","Program/Operator Indication of ownership$N","OTE(sts_Oper)","4"
RCOMMENT,"AOI_CM_CVLV:AOI","Logic","If Fault Reset Required, wait for Inp_FaultReset$N","OTU(Inp_FaultReset)","12"
RCOMMENT,"AOI_CM_CVLV:AOI","Logic","Valve Position Feedback Status$N","MOV(15,Val_State)","13"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"AOI_CM_VLV:AOI","Logic","Revision Information$N1.7 - Removed $Q_Time_$Q from time preset tagnames$N1.7 - Changed datatype for FaultAction from DINT to SINT$N1.7 - Modified Default value of FaultAction from $'1$' to $'0$'$N1.7 - Renamed Time preset tags$N1.8 - Modified function of sts_faults to stay in state until alarm reset taken place (if Reset Required)","NOP()","0"
RCOMMENT,"AOI_CM_VLV:AOI","Logic","Auto/Manual Logic$N","OTU(Inp_ManSel)","4"
RCOMMENT,"AOI_CM_VLV:AOI","Logic","Program/Operator Indication of ownership$N","OTE(sts_Oper)","5"
RCOMMENT,"AOI_CM_VLV:AOI","Logic","---- 2 Position Valve ----$NValve output Control Module$NWhen Transitioning Auto to Manual, preserve valve position command$NWhen valve is placed in Manual Mode, unlatch Manual Inputs (error prevention)$NWhen Valve is placed in Manual Mode, and Valve is n","OTU(Inp_ManClose)","6"
RCOMMENT,"AOI_CM_VLV:AOI","Logic","----3 Position Valve----$NInp Open will Energize OpenCmd Solenoid and De-Energize CloseCmd Solenoid and visa-versa.$NEnergizing neither Open or Close commands will De-Energize both CloseCmd and OpenCmd.$NThis is good for a valve that has 2 solenoids (1 fo","OTU(Inp_ManClose)","7"
RCOMMENT,"AOI_CM_VLV:AOI","Logic","---Examin Interlocks for Alarms---$NEnergized once all Transition Timers are complete$Nie. If you energize ManOpenCmd, the valve will open, however will not examine any alarms until that transition timer is complete$N","OTE(wrk_Examine_Faults)","9"
RCOMMENT,"AOI_CM_VLV:AOI","Logic","*** VALVE CLOSED *** status$N","OTE(sts_Closed)","12"
RCOMMENT,"AOI_CM_VLV:AOI","Logic","*** VALVE OPEN *** status$N","OTE(sts_Open)","13"
RCOMMENT,"AOI_CM_VLV:AOI","Logic","Monitor Valve Cycle Counts","OTU(Inp_CycleCountsRst_PB)","14"
RCOMMENT,"AOI_CM_VLV:AOI","Logic","Examine commands and position to $N-Declare Valve Position Failures-$NIf Valve is configured to use position switch debounce time, scan the following rung first before declaring a position failure","OTE(sts_FTC)","15"
RCOMMENT,"AOI_CM_VLV:AOI","Logic","De Bounce Timer.$NIf any of the positions fail, there is a debounce timer that will prevent alarms from initiating immediately IF SO DESIRED.$NIN ORDER TO USE THIS, YOU MUST ENTER TIME IN De-Bounce Time AND SELECT USE_DB from HMI$N$N$N","OTE(FTC_ZSO)","16"
RCOMMENT,"AOI_CM_VLV:AOI","Logic","If Faulted or Loss of Interlocks, position valve to shed/failure state","OTU(wrk_OutCloseCmd)","19"
RCOMMENT,"AOI_CM_VLV:AOI","Logic","End of wrk Out Commands$N","OTE(Out_OpenCmd)","20"
RCOMMENT,"AOI_CM_VLV:AOI","Logic","Valve Failure Counts$N","OTU(Inp_FaultCountsRst_PB)","21"
RCOMMENT,"AOI_CM_VLV:AOI","Logic","If Fault Reset Required, wait for Inp_FaultReset$N","OTU(Inp_FaultReset)","22"
RCOMMENT,"AOI_CM_VLV:AOI","Logic","Valve Position Feedback Status$N","MOV(7,wrk_State)","23"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"AOI_Timestamp:AOI","Logic","On System first natural scan of program, Reset Instruction","OTU(wrk_RstH_Done)","0"
RCOMMENT,"AOI_Timestamp:AOI","Logic","Aggregate Timestamp String$N","CONCAT(temp,S6,temp)","3"
RCOMMENT,"AOI_Timestamp:AOI","Logic","Shift Timestamp History and insert current timestamp$N","OTL(wrk_ShiftH_Done)","5"
RCOMMENT,"AOI_Timestamp:AOI","Logic","While Input is High, update duration value in current timestamp$N","DIV(TriggerTimer.ACC,1000,Timestamps[0].Duration)","6"
RCOMMENT,"AOI_Timestamp:AOI","Logic","Reset Timestamp History","CLR(sts_TriggerCounts)","7"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"ModuleStatus_3_0:AOI","Logic","Create Timestamp and History","Timestamp(CM_Timestamp,TimeStamps)","10"
